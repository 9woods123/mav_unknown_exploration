<launch>
  <!-- Gazebo arguments -->
  <arg name="mav_name" default="firefly"/>
  <arg name="gui" default="true"/>
  <arg name="verbose_gazebo" default="true"/>
  <arg name="world_name" default="house"/>
  <arg name="enable_ground_truth" default="true" />
  <arg name="debug" default="false"/>
  <arg name="paused" default="true"/>
  <arg name="verbose" default="false"/>

  <arg name="gazebo_gt_pose" default=  "/$(arg mav_name)/ground_truth/pose_with_covariance"/>
  <arg name="init_x" default="-4"/>
  <arg name="init_y" default="0.0"/>


  <!-- Voxblox arguments -->
  <arg name="voxel_size" default="0.10"/>
  <arg name="voxels_per_side" default="16"/>
  <arg name="ray_length" default="5.0"/>
  <arg name="method" default="merged"/>
  <arg name="verbose_voxblox" default="false"/>
   <arg name="record_data" default="true"/>

  <!-- Unreal Routine arguments -->
  <arg name="uecv_mode" default="fast"/>
  <arg name="slowdown" default="0.0"/>
  <arg name="delay" default="3.0"/>  
  
  <!-- Unreal Sensor arguments (ground_truth, kinect, gaussian_depth_noise) -->
  <arg name="model_type" default="gaussian_depth_noise"/>
  <arg name="flatten_distance" default="6.0"/>
  <arg name="maximum_distance" default="0.0"/>
  
  <!-- Odometry  arguments (random_walk, ground_truth) -->
  <arg name="odom_noise_model" default="random_walk"/>
  
  <!--  Planner arguments-->
  <!-- <arg name="planner_config" default="planners/example_config.yaml"/> -->
    <arg name="planner_config" default="planners/woods_indoor_planner.yaml"/>

  <!--  Experiment arguments -->  
  <arg name="experiment_config" default="woods_indoor.yaml"/>
  
  

  <!-- *** Run the Simulation *** -->
  <!-- Load experiment config -->
  <rosparam command="load" file="$(find active_3d_planning_app_reconstruction)/cfg/experiments/$(arg experiment_config)"/>
  <!-- Setup empty gazebo world for physics-->
  <env name="GAZEBO_MODEL_PATH" value="${GAZEBO_MODEL_PATH}:$(find rotors_gazebo)/models"/>
  <env name="GAZEBO_RESOURCE_PATH" value="${GAZEBO_RESOURCE_PATH}:$(find rotors_gazebo)/models"/>

  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find planning_gazebo_launch)/expworld.world" />
    <arg name="debug" value="$(arg debug)" />
    <arg name="paused" value="$(arg paused)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="verbose" value="$(arg verbose)"/>
  </include>


  <group ns="$(arg mav_name)">
    <!-- Setup a mav -->
    <include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
      <arg name="mav_name" value="$(arg mav_name)" />
      <arg name="model" value="$(find rotors_description)/urdf/mav_with_realsense.gazebo" />
      <arg name="enable_ground_truth" value="true" />
      <arg name="enable_logging" value="false" />
      <arg name="z" value="0.14" />
      <arg name="x" value="$(arg init_x)" />
      <arg name="y" value="$(arg init_y)" />

    </include>
     <node name="planning_gazebo_launch" pkg="planning_gazebo_launch" type="planning_gazebo_launch" output="screen">
         <param name="wp_x" type="double" value="$(arg init_x)" />
         <param name="wp_y" type="double" value="$(arg init_y)" />
        </node>
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />


    <!-- MPC trajectory tracker (0.0021 sampling time needs to match odom publish rate!)-->
    <node name="mav_nonlinear_mpc" pkg="mav_nonlinear_mpc" type="nonlinear_mpc_node" respawn="true" clear_params="true">
      <remap from="odometry" to="ground_truth/odometry" />
      <rosparam file="$(find mav_nonlinear_mpc)/resources/nonlinear_mpc_$(arg mav_name).yaml" />
      <rosparam file="$(find mav_disturbance_observer)/resources/disturbance_observer_$(arg mav_name).yaml"/>
      <param name="use_rc_teleop" value="false"/>
      <param name="verbose" value="false" />
      <param name="reference_frame" value="world"/>
       <param name="sampling_time" value="0.009"/>
      <!-- <param name="sampling_time" value="0.0021"/> -->
    </node>
    
    <!-- Rotor input controller -->
    <node name="PID_attitude_controller" pkg="mav_lowlevel_attitude_controller" type="mav_pid_attitude_controller_node" respawn="true" clear_params="true">
      <remap from="odometry" to="ground_truth/odometry" />
      <rosparam file="$(find mav_lowlevel_attitude_controller)/resources/PID_attitude_$(arg mav_name).yaml" />
    </node>
    
    <!-- Odometry: noise model -->
    <node name="odometry_noise_model" pkg="active_3d_planning_app_reconstruction" type="gps_odometry_simulator.py" output="screen">
      <param name="position_uncertainty" value="0.05"/>
      <param name="roll_pitch_uncertainty" value="1.5" />
      <param name="yaw_uncertainty" value="5.0" />
      <param name="noise_model" value="$(arg odom_noise_model)" />
      <param name="publish_tf" value="true" />
      <remap from="odometry_in" to="ground_truth/odometry" />
    </node> 

    <node name="traj_server" pkg="traj_server" type="traj_server" output="screen" >
    </node>

    <!-- subscribe the depth and color, and output the rgb pointcloud, due to the problem of realsense gazebo -->
      <!-- <node name="pointcloud_sensor" pkg="pointcloud_sensor" type="pointcloud_sensor" output="screen" >
      </node> -->

    <!-- static camera transform -->
    <node pkg="tf" type="static_transform_publisher" name="tf_camera_to_link" args="0 0 0 -0.5 0.5 -0.5 0.5 /camera_link /camera 100"/>  

  </group>

  <arg name="pointcloud_out" default="/firefly/camera/depth/points"/>

  <group ns="planner">
    <!-- Voxblox -->
    <node name="voxblox_node" pkg="voxblox_ros" type="esdf_server" output="screen" args="-alsologtostderr">
      <remap from="pointcloud" to="$(arg pointcloud_out)"/>
      <param name="use_tf_transforms" value="true"/>
      <param name="publish_tsdf_map" value="true" />
      <param name="publish_esdf_map" value="true" />
      <param name="tsdf_voxel_size" value="$(arg voxel_size)" />
      <param name="tsdf_voxels_per_side" value="$(arg voxels_per_side)" />
      <param name="color_mode" value="color" />
      <param name="update_mesh_every_n_sec" value="1.0" />
      <param name="method" value="$(arg method)" />
      <param name="max_ray_length_m" value="$(arg ray_length)" />
      <param name="allow_clear" value="true" />
      <param name="verbose" value="$(arg verbose_voxblox)" />
    </node>
    
    <!-- Planner -->
    <node name="planner_node" pkg="active_3d_planning_app_reconstruction" type="reconstruction_planner_node" output="screen">
		  <!-- Voxblox Server -->
      <!-- <remap from="pointcloud" to="$(arg pointcloud_out)"/> -->
      <remap from="planner_node/esdf_map_in" to="voxblox_node/esdf_map_out" />
      <remap from="planner_node/tsdf_map_in" to="voxblox_node/tsdf_map_out" />
      <param name="use_tf_transforms" value="false" />
      <param name="tsdf_voxel_size" value="$(arg voxel_size)" />
      <param name="tsdf_voxels_per_side" value="$(arg voxels_per_side)" />
      <param name="update_mesh_every_n_sec" value="0.0" />   
      <param name="publish_traversable" value="true" />    
      <param name="publish_pointclouds" value="true" />              
        <param name="log_performance" value="$(arg record_data)" />

    	<!-- General Settings -->
      <remap from="odometry" to="/$(arg mav_name)/ground_truth/odometry" />
      <remap from="command/trajectory" to="/$(arg mav_name)/command/trajectory" />
      <remap from="traj_server/trajectory" to="/$(arg mav_name)/traj_server/trajectory" />
      <remap from="replan_singal" to="/$(arg mav_name)/replan_singal" />

      <!-- Build the Planner by Configuration     -->
      <rosparam command="load" file="$(find active_3d_planning_app_reconstruction)/cfg/$(arg planner_config)"/>
    </node>    
   

  
  </group>

  <!-- RVIZ Visualization -->
  <node type="rviz" name="rviz_voxblox" pkg="rviz" args="-d $(find active_3d_planning_app_reconstruction)/cfg/experiments/experiment_visualization.rviz"/>
</launch>
